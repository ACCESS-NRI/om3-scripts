# Copyright 2023 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

import sys
import os
import argparse
import shutil
import numpy as np
import netCDF4 as nc
import multiprocessing as mp
from glob import glob
from datetime import datetime

"""
If the topog.nc file is changed and there are new wet or dry points,
the MOM6 restart files will need to be updated accordingly. This script
automates the process of fixing restart files when the bathymetry changes.

It works by copying valid (unmasked) data from an old set of restart files
(associated with the previous topography) into a new set of restart files
(generated using the updated topography).

Step before running this script:
1. Do a short run from rest using the *new* bathymetry file â€” this generates the template restart files.
2. Run this script to patch the new restarts using valid data from the old restarts.

Usage:
    python fix_mom6_restarts.py <template_dir> <old_dir> <output_dir> <template_prefix> <old_prefix> --nprocs <number_of_processes>

Example:
    python fix_mom6_restarts.py template_dir old_dir output_dir access-om3.mom6.r.1900-01-01-00000 access-om3.mom6.r.1900-01-01-00000 --nprocs 4

Where:
    - template_dir is the directory containing restart files from a short run using the new bathymetry.
    - old_dir is the directory containing restart files from the run using the old bathymetry.
    - output_dir is the directory where the new, fixed restart files will be written.
    - template_prefix is the filename prefix for template files (e.g., access-om3.mom6.r.1900-01-01-00000).
    - old_prefix is the filename prefix for old files (e.g., access-om3.mom6.r.1900-01-01-00000).
"""


def copy_data(args):
    in_f, out_f, run_command = args
    print(f"\n[INFO] Processing:\n  OLD: {in_f}\n  OUT: {out_f}")
    try:
        with nc.Dataset(in_f) as in_fp, nc.Dataset(out_f, "r+") as out_fp:
            # Add metadata
            out_fp.setncattr("title", "Updated restart file with new bathymetry mask")
            out_fp.setncattr("source", "Generated by fix_mom6_restarts.py")
            out_fp.setncattr(
                "history", f"Updated on {datetime.now().strftime('%Y-%m-%d')}"
            )
            out_fp.setncattr("run_command", run_command)

            for var in in_fp.variables:
                shape = in_fp.variables[var].shape
                print(f"  [CHECK] var: {var}, shape: {shape}")
                if len(shape) != 4 or shape[0] != 1 or shape[1] != 75:
                    print(f"  [SKIP] {var}: not 4D with 75 levels")
                    continue

                print(f"  -> Copying var: {var}")
                for level in range(75):
                    in_data = in_fp.variables[var][0, level, :, :]
                    out_data = out_fp.variables[var][0, level, :, :]

                    if not hasattr(in_data, "mask") or not hasattr(out_data, "mask"):
                        print(f"  !! Skipping {var} level {level} (no mask)")
                        continue

                    mask = np.logical_and(~in_data.mask, ~out_data.mask)
                    out_data[np.where(mask)] = in_data[np.where(mask)]
    except Exception as e:
        print(f"[ERROR] Failed processing {in_f}: {e}")


def main():
    run_command = " ".join(sys.argv)
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "template_dir",
        help="Name of directory containing collated restart files from a run using the new bathymetry (typically a short run from rest).",
    )
    parser.add_argument(
        "old_dir",
        help="Name of directory containing collated restart files from a run using the old bathymetry.",
    )
    parser.add_argument(
        "output_dir",
        help="Name of the output directory which will contain new restarts.",
    )
    parser.add_argument(
        "template_prefix",
        help="File name prefix of template restart files from the run using the new bathymetry "
        "(typically a short run from rest). For example, if the file name is "
        "'access-om3.mom6.r.1900-01-01-00000_1.nc', then the prefix is "
        "'access-om3.mom6.r.1900-01-01-00000'.",
    )
    parser.add_argument(
        "old_prefix",
        help="File name prefix of old restart files from the run using the old bathymetry. "
        "For example, if the file name is 'access-om3.mom6.r.1900-01-01-00000_1.nc', "
        "then the prefix is 'access-om3.mom6.r.1900-01-01-00000'.",
    )

    parser.add_argument("--nprocs", default=1, type=int, help="Parallel processes")
    args = parser.parse_args()

    template_files = sorted(
        glob(os.path.join(args.template_dir, f"{args.template_prefix}*.nc"))
    )
    print(f"[INFO] Found {len(template_files)} template files:")
    for tf in template_files:
        print(f"  -> {tf}")

    if not os.path.exists(args.output_dir):
        print(f"[INFO] Creating output directory: {args.output_dir}")
        os.makedirs(args.output_dir)

    old_files = []
    output_files = []

    for tf in template_files:
        suffix = tf.split(args.template_prefix)[-1]  # e.g., '', '_1', '_2', etc.
        old_f = os.path.join(args.old_dir, f"{args.old_prefix}{suffix}")
        out_f = os.path.join(args.output_dir, f"{args.old_prefix}{suffix}")

        old_files.append(old_f)
        output_files.append(out_f)

        print(f"[COPY] {tf} -> {out_f}")
        shutil.copy(tf, out_f)

    print("[INFO] Starting update of variables...")
    pool = mp.Pool(args.nprocs)
    pool.map(copy_data, zip(old_files, output_files, [run_command] * len(old_files)))
    pool.close()
    pool.join()
    print("[DONE] Restart update completed.")


if __name__ == "__main__":
    sys.exit(main())
